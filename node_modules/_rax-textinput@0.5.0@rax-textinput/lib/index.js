'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _rax = require('rax');

var _universalEnv = require('universal-env');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var typeMap = {
  'default': 'text',
  'ascii-capable': 'text',
  'numbers-and-punctuation': 'number',
  'url': 'url',
  'number-pad': 'number',
  'phone-pad': 'tel',
  'name-phone-pad': 'text',
  'email-address': 'email',
  'decimal-pad': 'number',
  'twitter': 'text',
  'web-search': 'search',
  'numeric': 'number'
};

function getText(event) {
  var text = void 0;
  if (_universalEnv.isWeex) {
    text = event.value;
  } else {
    text = event.target.value;
  }
  return text;
}

function genEventObject(originalEvent) {
  var text = getText(originalEvent);
  return {
    nativeEvent: {
      text: text
    },
    originalEvent: originalEvent,
    value: text,
    target: originalEvent.target
  };
}

var TextInput = function (_Component) {
  _inherits(TextInput, _Component);

  function TextInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleInput = function (event) {
      _this.props.onInput(genEventObject(event));
    }, _this.handleChange = function (event) {
      if (_this.props.onChange) {
        _this.props.onChange(genEventObject(event));
      }

      if (_this.props.onChangeText) {
        var text = getText(event);
        _this.props.onChangeText(text);
      }
    }, _this.handleFocus = function (event) {
      _this.props.onFocus(genEventObject(event));
    }, _this.handleBlur = function (event) {
      _this.props.onBlur(genEventObject(event));
    }, _this.focus = function () {
      _this.refs.input.focus && _this.refs.input.focus();
    }, _this.blur = function () {
      _this.refs.input.blur && _this.refs.input.blur();
    }, _this.clear = function () {
      (0, _rax.setNativeProps)(_this.refs.input, { value: '' });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TextInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      (0, _rax.setNativeProps)(this.refs.input, { value: newProps.value });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          accessibilityLabel = _props.accessibilityLabel,
          autoComplete = _props.autoComplete,
          editable = _props.editable,
          keyboardType = _props.keyboardType,
          maxNumberOfLines = _props.maxNumberOfLines,
          multiline = _props.multiline,
          numberOfLines = _props.numberOfLines,
          onBlur = _props.onBlur,
          onFocus = _props.onFocus,
          onChange = _props.onChange,
          onChangeText = _props.onChangeText,
          onInput = _props.onInput,
          password = _props.password,
          secureTextEntry = _props.secureTextEntry,
          style = _props.style,
          value = _props.value,
          defaultValue = _props.defaultValue;


      var propsCommon = _extends({}, this.props, {
        'aria-label': accessibilityLabel,
        autoComplete: autoComplete && 'on',
        onChange: (onChange || onChangeText) && this.handleChange,
        onInput: onInput && this.handleInput,
        onBlur: onBlur && this.handleBlur,
        onFocus: onFocus && this.handleFocus,
        style: _extends({}, styles.initial, style),
        ref: 'input'
      });

      if (value) {
        delete propsCommon.defaultValue;
      } else {
        propsCommon.value = defaultValue;
      }

      if (typeof editable !== 'undefined' && !editable) {
        propsCommon.readOnly = true;
      }

      var type = typeMap[keyboardType];
      if (password || secureTextEntry) {
        type = 'password';
      }

      if (_universalEnv.isWeex) {
        // Diff with web readonly attr, `disabled` must be boolean value
        var disabled = Boolean(propsCommon.readOnly);

        if (multiline) {
          return (0, _rax.createElement)('textarea', _extends({}, propsCommon, { rows: 20, disabled: disabled }));
        } else {
          // https://github.com/alibaba/weex/blob/dev/doc/components/input.md
          return (0, _rax.createElement)('input', _extends({}, propsCommon, { type: type, disabled: disabled }));
        }
      } else {
        var input = void 0;
        if (multiline) {
          var propsMultiline = {
            maxRows: maxNumberOfLines || numberOfLines,
            minRows: numberOfLines
          };

          input = (0, _rax.createElement)(
            'textarea',
            _extends({}, propsCommon, propsMultiline),
            propsCommon.value
          );
        } else {
          input = (0, _rax.createElement)('input', _extends({}, propsCommon, { type: type }));
        }

        return input;
      }
    }
  }]);

  return TextInput;
}(_rax.Component);

TextInput.propTypes = {};


var styles = {
  initial: {
    appearance: 'none',
    backgroundColor: 'transparent',
    borderColor: '#000000',
    borderWidth: 0,
    boxSizing: 'border-box',
    color: '#000000',
    padding: 0,
    paddingLeft: 24,
    fontSize: 24,
    lineHeight: 60,
    height: 60 // default height
  }
};

exports.default = TextInput;
module.exports = exports['default'];